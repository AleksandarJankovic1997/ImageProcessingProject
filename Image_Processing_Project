import math
from  PIL import Image

import os
import numpy as np
import math
import  matplotlib
from matplotlib import pyplot as plt

os.chdir("C:\\Users\\Nevena\\Desktop\\2020&2021 classes\\Introduction to image processing\\Image_Processing_Project")


class MyImage:

    def __init__(self, image_path='prazno', width=0, height=4):
        if width == 0:
            image = Image.open(image_path)
            self.image_path = image_path
            self.arr = np.array(image)
            self.width = self.arr[0].size // 3
            self.height = self.arr.size // 3 // self.width
        else:
            self.width = width
            self.height = height
            self.arr = np.empty((height, width, 3), dtype=np.int8)
            self.arr = self.arr.astype(np.uint8)

    def new(width, height):

        return MyImage('bezveze', width, height)

    def getSize(self):
        return (self.width, self.height)

    def open(image_path):
        return MyImage(image_path, 0, 0)

    def save(self, save_image_path):
        image = Image.fromarray(self.arr)
        image.save(save_image_path, quality=80, optimize=True, progressive=False)

    def getpixel(self, shape):
        w = shape[0]
        h = shape[1]
        r, g, b = self.arr[h][w]
        return (r, g, b)

    def putpixel(self, shape, rgb):
        w, h = shape[0], shape[1]
        r, g, b = rgb[0], rgb[1], rgb[2]
        if r < 0:
            r = 0
        if r > 255:
            r = 255
        if g < 0:
            g = 0
        if g > 255:
            g = 255
        if b < 0:
            b = 0
        if b > 255:
            b = 255
        self.arr[h][w][0] = r
        self.arr[h][w][1] = g
        self.arr[h][w][2] = b

    def histogramHSV(self):
        histogram = []
        for i in range(self.height):
            for j in range(self.width):
                r, g, b = self.getpixel((j, i))
                hsv = rgb2hsv(r, g, b)
                histogram[int(hsv[0])] += 1
        return histogram

    def histogramRGB(self):
        histogramrgb = np.zeros((255, 3))
        for i in range(self.height):
            for j in range(self.width):
                r, g, b = self.getpixel((j, i))
                histogramrgb[r][0] += 1
                histogramrgb[g][1] += 1
                histogramrgb[b][2] += 1
        return histogramrgb

    def convert(self):
        print('soon')
def rgb2hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v

def hsv2rgb(h, s, v):
    h = float(h)
    s = float(s)
    v = float(v)
    h60 = h / 60.0

    h60f = math.floor(h60)
    hi = int(h60f) % 6
    f = h60 - h60f
    p = v * (1 - s)
    q = v * (1 - f * s)
    t = v * (1 - (1 - f) * s)
    r, g, b = 0, 0, 0
    if hi == 0:
        r, g, b = v, t, p
    elif hi == 1:
        r, g, b = q, v, p
    elif hi == 2:
        r, g, b = p, v, t
    elif hi == 3:
        r, g, b = p, q, v
    elif hi == 4:
        r, g, b = t, p, v
    elif hi == 5:
        r, g, b = v, p, q
    r, g, b = int(r * 255), int(g * 255), int(b * 255)
    return r, g, b



def contrast(imageName, parameterCont):
    image = MyImage.open(imageName)

    for x in range(image.width):
        for y in range(image.height):
            rgb = image.getpixel((x, y))
            # skaliram piksele na range[0,1]
            red = rgb[0] / 255
            green = rgb[1] / 255
            blue = rgb[2] / 255
            # ovde je 0.5 trashold,ako je boja tamnija, kad se oduzme trashold ide u negativne, pa ce se mnozenjem
            # sa parametrom jos otici u tamnije, a ako je svetla, posvetlece se
            r = (((red - 0.5) * parameterCont) + 0.5) * 255
            g = (((green - 0.5) * parameterCont) + 0.5) * 255
            b = (((blue - 0.5) * parameterCont) + 0.5) * 255

            if r > 255:
                r = 255
            elif r < 0:
                r = 0
            if g > 255:
                g = 255
            elif g < 0:
                g = 0
            if b > 255:
                b = 255
            elif b < 0:
                b = 0
            image.putpixel((x, y), (r, g, b))
    image.save("Nova_slika_kontrast.jpg")

def blur(imageName, radius):
    image = MyImage.open(imageName)
    for x in range(image.width):
        for y in range(image.height):
            mat = [image.getpixel((x, y))]
            for i in range(1, radius):
                if x - i > 1 and x - i < image.width - 1:
                    if y + i > 1 and y + i < image.height - 1:
                        mat.append(image.getpixel((x - i, y + i)))
                    if y > 1 and y < image.height - 1:
                        mat.append(image.getpixel((x - i, y)))
                    if y - i > 1 and y - i < image.height - 1:
                        mat.append(image.getpixel((x - i, y - i)))
                if x > 1 and x < image.width - 1:
                    if y + i > 1 and y + i < image.height - 1:
                        mat.append(image.getpixel((x, y + i)))
                    if y > 1 and y < image.height - 1:
                        mat.append(image.getpixel((x, y)))
                    if y - i > 1 and y - i < image.height - 1:
                        mat.append(image.getpixel((x, y - i)))
                if x + i > 1 and x + i < image.width - 1:
                    if y + i > 1 and y + i < image.height - 1:
                        mat.append(image.getpixel((x + i, y + i)))
                    if y > 1 and y < image.height - 1:
                        mat.append(image.getpixel((x + i, y)))
                    if y - i > 1 and y - i < image.height - 1:
                        mat.append(image.getpixel((x + i, y - i)))

            sumR = 0
            sumG = 0
            sumB = 0
            for i in range(len(mat)):
                sumR = sumR + mat[i][0]
                sumG = sumG + mat[i][1]
                sumB = sumB + mat[i][2]
            r = sumR / len(mat)
            g = sumG / len(mat)
            b = sumB / len(mat)

            image.putpixel((x, y), (r, g, b))

    # return image.arr
    image.save("Nova_slika_blur.jpg")

def sharpen(imageName, parameterSharp):
    image = MyImage.open(imageName)
    blured = MyImage.open(imageName)
    for x in range(image.width):
        for y in range(image.height):
            if x > 1 and x < image.width - 1 and y > 1 and y < image.height - 1:

                mat = [image.getpixel((x - 1, y + 1)), image.getpixel((x, y + 1)), image.getpixel((x + 1, y + 1)),
                       image.getpixel((x - 1, y)), image.getpixel((x, y)), image.getpixel((x + 1, y)),
                       image.getpixel((x - 1, y - 1)), image.getpixel((x, y - 1)), image.getpixel((x + 1, y - 1))]
                sumR = 0
                sumG = 0
                sumB = 0
                for i in range(8):
                    sumR = sumR + mat[i][0]
                    sumG = sumG + mat[i][1]
                    sumB = sumB + mat[i][2]
                BLUREDr = sumR / 9
                BLUREDg = sumG / 9
                BLUREDb = sumB / 9
                r = mat[4][0] + (mat[4][0] - BLUREDr) * parameterSharp
                g = mat[4][1] + (mat[4][1] - BLUREDg) * parameterSharp
                b = mat[4][2] + (mat[4][2] - BLUREDb) * parameterSharp
                if r > 255:
                    r = 255
                elif r < 0:
                    r = 0
                if g > 255:
                    g = 255
                elif g < 0:
                    g = 0
                if b > 255:
                    b = 255
                elif b < 0:
                    b = 0
                image.putpixel((x, y), (r, g, b))
    image.save("Nova_slika_sharpen2.jpg")



from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(100, 110, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Maiandra GD")
        font.setPointSize(12)
        self.comboBox.setFont(font)
        self.comboBox.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(40, 230, 271, 31))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.buttonPreview = QtWidgets.QPushButton(self.centralwidget)
        self.buttonPreview.setGeometry(QtCore.QRect(100, 320, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Maiandra GD")
        font.setPointSize(12)
        self.buttonPreview.setFont(font)
        self.buttonPreview.setObjectName("buttonPreview")
        self.buttonSave = QtWidgets.QPushButton(self.centralwidget)
        self.buttonSave.setGeometry(QtCore.QRect(100, 400, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Maiandra GD")
        font.setPointSize(12)
        self.buttonSave.setFont(font)
        self.buttonSave.setObjectName("buttonSave")
        self.buttonUpload = QtWidgets.QPushButton(self.centralwidget)
        self.buttonUpload.setGeometry(QtCore.QRect(100, 30, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Maiandra GD")
        font.setPointSize(12)
        self.buttonUpload.setFont(font)
        self.buttonUpload.setObjectName("buttonUpload")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Adjust"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Brightness"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Contrast"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Warmth"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Saturation"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Fade"))
        self.comboBox.setItemText(6, _translate("MainWindow", "Highlights"))
        self.comboBox.setItemText(7, _translate("MainWindow", "Shadows"))
        self.comboBox.setItemText(8, _translate("MainWindow", "Vignette"))
        self.comboBox.setItemText(9, _translate("MainWindow", "Tilt shift"))
        self.comboBox.setItemText(10, _translate("MainWindow", "Sharpen"))
        self.comboBox.setItemText(11, _translate("MainWindow", "Zoom in"))
        self.buttonPreview.setText(_translate("MainWindow", "Preview"))
        self.buttonSave.setText(_translate("MainWindow", "Save new image"))
        self.buttonUpload.setText(_translate("MainWindow", "Upload image"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
